/*!
*  filename: ej2-angular-dropdowns.umd.js
*  version : 18.4.44
*  Copyright Syncfusion Inc. 2001 - 2020. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/forms'), require('@syncfusion/ej2-angular-base'), require('@syncfusion/ej2-dropdowns'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['@angular/core','@angular/common','exports', '@angular/core', '@angular/forms', '@syncfusion/ej2-angular-base', '@syncfusion/ej2-dropdowns', '@angular/common'], factory) :
	(factory(global.ng.core,global.ng.common,(global['ej2-angular-dropdowns'] = {}),global.ng.core,global.ng.forms,global.ej2.angular.base,global.ej2.dropdowns,global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports,core,forms,ej2AngularBase,ej2Dropdowns,common) { 
var _c0 = ["footerTemplate"];
var _c1 = ["headerTemplate"];
var _c2 = ["valueTemplate"];
var _c3 = ["groupTemplate"];
var _c4 = ["itemTemplate"];
var _c5 = ["noRecordsTemplate"];
var _c6 = ["actionFailureTemplate"];
'use strict';

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs = ['actionFailureTemplate', 'allowFiltering', 'cssClass', 'dataSource', 'enablePersistence', 'enableRtl', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'groupTemplate', 'headerTemplate', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'index', 'itemTemplate', 'locale', 'noRecordsTemplate', 'placeholder', 'popupHeight', 'popupWidth', 'query', 'readonly', 'showClearButton', 'sortOrder', 'text', 'value', 'valueTemplate', 'width', 'zIndex'];
var outputs = ['actionBegin', 'actionComplete', 'actionFailure', 'beforeOpen', 'blur', 'change', 'close', 'created', 'dataBound', 'destroyed', 'filtering', 'focus', 'open', 'select', 'valueChange'];
var twoWays = ['value'];
/**
 * The DropDownList component contains a list of predefined values, from which the user can choose a single value.
 * ```html
 * <ejs-dropdownlist></ejs-dropdownlist>
 * ```
 */
exports.DropDownListComponent = DropDownListComponent_1 = /** @class */ (function (_super) {
    __extends(DropDownListComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function DropDownListComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.skipFromEvent = true;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs);
        _this.addTwoWay.call(_this, twoWays);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.formContext = new ej2AngularBase.FormBase();
        _this.formCompContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    DropDownListComponent.prototype.registerOnChange = function (registerFunction) {
    };
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    DropDownListComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DropDownListComponent.prototype.writeValue = function (value) {
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    DropDownListComponent.prototype.setDisabledState = function (disabled) {
    };
    /**
     * @return {?}
     */
    DropDownListComponent.prototype.ngOnInit = function () {
        this.formCompContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    DropDownListComponent.prototype.ngAfterViewInit = function () {
        this.formContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    DropDownListComponent.prototype.ngOnDestroy = function () {
        this.formCompContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    DropDownListComponent.prototype.ngAfterContentChecked = function () {
        this.formCompContext.ngAfterContentChecked(this);
    };
DropDownListComponent.ɵfac = function DropDownListComponent_Factory(t) { return new (t || DropDownListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
DropDownListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropDownListComponent, selectors: [["ejs-dropdownlist"]], contentQueries: function DropDownListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c3, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c5, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c6, 1);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.valueTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noRecordsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionFailureTemplate = _t.first);
    } }, inputs: { actionFailureTemplate: "actionFailureTemplate", allowFiltering: "allowFiltering", cssClass: "cssClass", dataSource: "dataSource", enablePersistence: "enablePersistence", enableRtl: "enableRtl", enabled: "enabled", fields: "fields", filterBarPlaceholder: "filterBarPlaceholder", filterType: "filterType", floatLabelType: "floatLabelType", footerTemplate: "footerTemplate", groupTemplate: "groupTemplate", headerTemplate: "headerTemplate", htmlAttributes: "htmlAttributes", ignoreAccent: "ignoreAccent", ignoreCase: "ignoreCase", index: "index", itemTemplate: "itemTemplate", locale: "locale", noRecordsTemplate: "noRecordsTemplate", placeholder: "placeholder", popupHeight: "popupHeight", popupWidth: "popupWidth", query: "query", readonly: "readonly", showClearButton: "showClearButton", sortOrder: "sortOrder", text: "text", value: "value", valueTemplate: "valueTemplate", width: "width", zIndex: "zIndex" }, outputs: { actionBegin: "actionBegin", actionComplete: "actionComplete", actionFailure: "actionFailure", beforeOpen: "beforeOpen", blur: "blur", change: "change", close: "close", created: "created", dataBound: "dataBound", destroyed: "destroyed", filtering: "filtering", focus: "focus", open: "open", select: "select", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return DropDownListComponent_1; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DropDownListComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropDownListComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-dropdownlist',
                inputs: inputs,
                outputs: outputs,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return DropDownListComponent_1; }),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { footerTemplate: [{
            type: core.ContentChild,
            args: ['footerTemplate']
        }], headerTemplate: [{
            type: core.ContentChild,
            args: ['headerTemplate']
        }], valueTemplate: [{
            type: core.ContentChild,
            args: ['valueTemplate']
        }], groupTemplate: [{
            type: core.ContentChild,
            args: ['groupTemplate']
        }], itemTemplate: [{
            type: core.ContentChild,
            args: ['itemTemplate']
        }], noRecordsTemplate: [{
            type: core.ContentChild,
            args: ['noRecordsTemplate']
        }], actionFailureTemplate: [{
            type: core.ContentChild,
            args: ['actionFailureTemplate']
        }] }); })();
    return DropDownListComponent;
}(ej2Dropdowns.DropDownList));
/**
 * @nocollapse
 */
exports.DropDownListComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.DropDownListComponent.propDecorators = {
    'footerTemplate': [{ type: core.ContentChild, args: ['footerTemplate',] },],
    'headerTemplate': [{ type: core.ContentChild, args: ['headerTemplate',] },],
    'valueTemplate': [{ type: core.ContentChild, args: ['valueTemplate',] },],
    'groupTemplate': [{ type: core.ContentChild, args: ['groupTemplate',] },],
    'itemTemplate': [{ type: core.ContentChild, args: ['itemTemplate',] },],
    'noRecordsTemplate': [{ type: core.ContentChild, args: ['noRecordsTemplate',] },],
    'actionFailureTemplate': [{ type: core.ContentChild, args: ['actionFailureTemplate',] },],
};
__decorate([
    ej2AngularBase.Template(),
    __metadata("design:type", Object)
], exports.DropDownListComponent.prototype, "footerTemplate", void 0);
__decorate([
    ej2AngularBase.Template(),
    __metadata("design:type", Object)
], exports.DropDownListComponent.prototype, "headerTemplate", void 0);
__decorate([
    ej2AngularBase.Template(),
    __metadata("design:type", Object)
], exports.DropDownListComponent.prototype, "valueTemplate", void 0);
__decorate([
    ej2AngularBase.Template(),
    __metadata("design:type", Object)
], exports.DropDownListComponent.prototype, "groupTemplate", void 0);
__decorate([
    ej2AngularBase.Template(),
    __metadata("design:type", Object)
], exports.DropDownListComponent.prototype, "itemTemplate", void 0);
__decorate([
    ej2AngularBase.Template('No records found'),
    __metadata("design:type", Object)
], exports.DropDownListComponent.prototype, "noRecordsTemplate", void 0);
__decorate([
    ej2AngularBase.Template('Request failed'),
    __metadata("design:type", Object)
], exports.DropDownListComponent.prototype, "actionFailureTemplate", void 0);
exports.DropDownListComponent = DropDownListComponent_1 = __decorate([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase, ej2AngularBase.FormBase]),
    __metadata("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.DropDownListComponent);
var DropDownListComponent_1;
/**
 * NgModule definition for the DropDownList component.
 */
var DropDownListModule = /** @class */ (function () {
    function DropDownListModule() {
    }
DropDownListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DropDownListModule });
DropDownListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DropDownListModule_Factory(t) { return new (t || DropDownListModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropDownListModule, { declarations: [
        /**
         * The DropDownList component contains a list of predefined values, from which the user can choose a single value.
         * ```html
         * <ejs-dropdownlist></ejs-dropdownlist>
         * ```
         */
        exports.DropDownListComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * The DropDownList component contains a list of predefined values, from which the user can choose a single value.
         * ```html
         * <ejs-dropdownlist></ejs-dropdownlist>
         * ```
         */
        exports.DropDownListComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropDownListModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.DropDownListComponent
                ],
                exports: [
                    exports.DropDownListComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DropDownListModule;
}());
/**
 * @nocollapse
 */
DropDownListModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the DropDownList component with providers.
 */
var DropDownListAllModule = /** @class */ (function () {
    function DropDownListAllModule() {
    }
DropDownListAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DropDownListAllModule });
DropDownListAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DropDownListAllModule_Factory(t) { return new (t || DropDownListAllModule)(); }, providers: [], imports: [[common.CommonModule, DropDownListModule], DropDownListModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropDownListAllModule, { imports: [ɵngcc1.CommonModule, DropDownListModule], exports: [DropDownListModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropDownListAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, DropDownListModule],
                exports: [
                    DropDownListModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return DropDownListAllModule;
}());
/**
 * @nocollapse
 */
DropDownListAllModule.ctorParameters = function () { return []; };
var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$1 = ['actionFailureTemplate', 'allowCustom', 'allowFiltering', 'autofill', 'cssClass', 'dataSource', 'enablePersistence', 'enableRtl', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'groupTemplate', 'headerTemplate', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'index', 'itemTemplate', 'locale', 'noRecordsTemplate', 'placeholder', 'popupHeight', 'popupWidth', 'query', 'readonly', 'showClearButton', 'sortOrder', 'text', 'value', 'valueTemplate', 'width', 'zIndex'];
var outputs$1 = ['actionBegin', 'actionComplete', 'actionFailure', 'beforeOpen', 'blur', 'change', 'close', 'created', 'customValueSpecifier', 'dataBound', 'destroyed', 'filtering', 'focus', 'open', 'select', 'valueChange'];
var twoWays$1 = ['value'];
/**
 * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.
 * ```html
 * <ejs-combobox></ejs-combobox>
 * ```
 */
exports.ComboBoxComponent = ComboBoxComponent_1 = /** @class */ (function (_super) {
    __extends(ComboBoxComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function ComboBoxComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.skipFromEvent = true;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$1);
        _this.addTwoWay.call(_this, twoWays$1);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.formContext = new ej2AngularBase.FormBase();
        _this.formCompContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    ComboBoxComponent.prototype.registerOnChange = function (registerFunction) {
    };
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    ComboBoxComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ComboBoxComponent.prototype.writeValue = function (value) {
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    ComboBoxComponent.prototype.setDisabledState = function (disabled) {
    };
    /**
     * @return {?}
     */
    ComboBoxComponent.prototype.ngOnInit = function () {
        this.formCompContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    ComboBoxComponent.prototype.ngAfterViewInit = function () {
        this.formContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    ComboBoxComponent.prototype.ngOnDestroy = function () {
        this.formCompContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    ComboBoxComponent.prototype.ngAfterContentChecked = function () {
        this.formCompContext.ngAfterContentChecked(this);
    };
ComboBoxComponent.ɵfac = function ComboBoxComponent_Factory(t) { return new (t || ComboBoxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
ComboBoxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ComboBoxComponent, selectors: [["ejs-combobox"]], contentQueries: function ComboBoxComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c3, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c5, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c6, 1);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noRecordsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionFailureTemplate = _t.first);
    } }, inputs: { actionFailureTemplate: "actionFailureTemplate", allowCustom: "allowCustom", allowFiltering: "allowFiltering", autofill: "autofill", cssClass: "cssClass", dataSource: "dataSource", enablePersistence: "enablePersistence", enableRtl: "enableRtl", enabled: "enabled", fields: "fields", filterBarPlaceholder: "filterBarPlaceholder", filterType: "filterType", floatLabelType: "floatLabelType", footerTemplate: "footerTemplate", groupTemplate: "groupTemplate", headerTemplate: "headerTemplate", htmlAttributes: "htmlAttributes", ignoreAccent: "ignoreAccent", ignoreCase: "ignoreCase", index: "index", itemTemplate: "itemTemplate", locale: "locale", noRecordsTemplate: "noRecordsTemplate", placeholder: "placeholder", popupHeight: "popupHeight", popupWidth: "popupWidth", query: "query", readonly: "readonly", showClearButton: "showClearButton", sortOrder: "sortOrder", text: "text", value: "value", valueTemplate: "valueTemplate", width: "width", zIndex: "zIndex" }, outputs: { actionBegin: "actionBegin", actionComplete: "actionComplete", actionFailure: "actionFailure", beforeOpen: "beforeOpen", blur: "blur", change: "change", close: "close", created: "created", customValueSpecifier: "customValueSpecifier", dataBound: "dataBound", destroyed: "destroyed", filtering: "filtering", focus: "focus", open: "open", select: "select", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return ComboBoxComponent_1; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function ComboBoxComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ComboBoxComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-combobox',
                inputs: inputs$1,
                outputs: outputs$1,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return ComboBoxComponent_1; }),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { footerTemplate: [{
            type: core.ContentChild,
            args: ['footerTemplate']
        }], headerTemplate: [{
            type: core.ContentChild,
            args: ['headerTemplate']
        }], groupTemplate: [{
            type: core.ContentChild,
            args: ['groupTemplate']
        }], itemTemplate: [{
            type: core.ContentChild,
            args: ['itemTemplate']
        }], noRecordsTemplate: [{
            type: core.ContentChild,
            args: ['noRecordsTemplate']
        }], actionFailureTemplate: [{
            type: core.ContentChild,
            args: ['actionFailureTemplate']
        }] }); })();
    return ComboBoxComponent;
}(ej2Dropdowns.ComboBox));
/**
 * @nocollapse
 */
exports.ComboBoxComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.ComboBoxComponent.propDecorators = {
    'footerTemplate': [{ type: core.ContentChild, args: ['footerTemplate',] },],
    'headerTemplate': [{ type: core.ContentChild, args: ['headerTemplate',] },],
    'groupTemplate': [{ type: core.ContentChild, args: ['groupTemplate',] },],
    'itemTemplate': [{ type: core.ContentChild, args: ['itemTemplate',] },],
    'noRecordsTemplate': [{ type: core.ContentChild, args: ['noRecordsTemplate',] },],
    'actionFailureTemplate': [{ type: core.ContentChild, args: ['actionFailureTemplate',] },],
};
__decorate$1([
    ej2AngularBase.Template(),
    __metadata$1("design:type", Object)
], exports.ComboBoxComponent.prototype, "footerTemplate", void 0);
__decorate$1([
    ej2AngularBase.Template(),
    __metadata$1("design:type", Object)
], exports.ComboBoxComponent.prototype, "headerTemplate", void 0);
__decorate$1([
    ej2AngularBase.Template(),
    __metadata$1("design:type", Object)
], exports.ComboBoxComponent.prototype, "groupTemplate", void 0);
__decorate$1([
    ej2AngularBase.Template(),
    __metadata$1("design:type", Object)
], exports.ComboBoxComponent.prototype, "itemTemplate", void 0);
__decorate$1([
    ej2AngularBase.Template('No records found'),
    __metadata$1("design:type", Object)
], exports.ComboBoxComponent.prototype, "noRecordsTemplate", void 0);
__decorate$1([
    ej2AngularBase.Template('Request failed'),
    __metadata$1("design:type", Object)
], exports.ComboBoxComponent.prototype, "actionFailureTemplate", void 0);
exports.ComboBoxComponent = ComboBoxComponent_1 = __decorate$1([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase, ej2AngularBase.FormBase]),
    __metadata$1("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.ComboBoxComponent);
var ComboBoxComponent_1;
/**
 * NgModule definition for the ComboBox component.
 */
var ComboBoxModule = /** @class */ (function () {
    function ComboBoxModule() {
    }
ComboBoxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ComboBoxModule });
ComboBoxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ComboBoxModule_Factory(t) { return new (t || ComboBoxModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ComboBoxModule, { declarations: [
        /**
         * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.
         * ```html
         * <ejs-combobox></ejs-combobox>
         * ```
         */
        exports.ComboBoxComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.
         * ```html
         * <ejs-combobox></ejs-combobox>
         * ```
         */
        exports.ComboBoxComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ComboBoxModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.ComboBoxComponent
                ],
                exports: [
                    exports.ComboBoxComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return ComboBoxModule;
}());
/**
 * @nocollapse
 */
ComboBoxModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the ComboBox component with providers.
 */
var ComboBoxAllModule = /** @class */ (function () {
    function ComboBoxAllModule() {
    }
ComboBoxAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ComboBoxAllModule });
ComboBoxAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ComboBoxAllModule_Factory(t) { return new (t || ComboBoxAllModule)(); }, providers: [], imports: [[common.CommonModule, ComboBoxModule], ComboBoxModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ComboBoxAllModule, { imports: [ɵngcc1.CommonModule, ComboBoxModule], exports: [ComboBoxModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ComboBoxAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, ComboBoxModule],
                exports: [
                    ComboBoxModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return ComboBoxAllModule;
}());
/**
 * @nocollapse
 */
ComboBoxAllModule.ctorParameters = function () { return []; };
var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$2 = ['actionFailureTemplate', 'allowCustom', 'allowFiltering', 'autofill', 'cssClass', 'dataSource', 'enablePersistence', 'enableRtl', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'groupTemplate', 'headerTemplate', 'highlight', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'index', 'itemTemplate', 'locale', 'minLength', 'noRecordsTemplate', 'placeholder', 'popupHeight', 'popupWidth', 'query', 'readonly', 'showClearButton', 'showPopupButton', 'sortOrder', 'suggestionCount', 'text', 'value', 'valueTemplate', 'width', 'zIndex'];
var outputs$2 = ['actionBegin', 'actionComplete', 'actionFailure', 'beforeOpen', 'blur', 'change', 'close', 'created', 'customValueSpecifier', 'dataBound', 'destroyed', 'filtering', 'focus', 'open', 'select', 'valueChange'];
var twoWays$2 = ['value'];
/**
 * The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.
 * ```html
 * <ejs-autocomplete></ejs-autocomplete>
 * ```
 */
exports.AutoCompleteComponent = AutoCompleteComponent_1 = /** @class */ (function (_super) {
    __extends(AutoCompleteComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function AutoCompleteComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.skipFromEvent = true;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$2);
        _this.addTwoWay.call(_this, twoWays$2);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.formContext = new ej2AngularBase.FormBase();
        _this.formCompContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    AutoCompleteComponent.prototype.registerOnChange = function (registerFunction) {
    };
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    AutoCompleteComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AutoCompleteComponent.prototype.writeValue = function (value) {
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    AutoCompleteComponent.prototype.setDisabledState = function (disabled) {
    };
    /**
     * @return {?}
     */
    AutoCompleteComponent.prototype.ngOnInit = function () {
        this.formCompContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    AutoCompleteComponent.prototype.ngAfterViewInit = function () {
        this.formContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    AutoCompleteComponent.prototype.ngOnDestroy = function () {
        this.formCompContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    AutoCompleteComponent.prototype.ngAfterContentChecked = function () {
        this.formCompContext.ngAfterContentChecked(this);
    };
AutoCompleteComponent.ɵfac = function AutoCompleteComponent_Factory(t) { return new (t || AutoCompleteComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
AutoCompleteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AutoCompleteComponent, selectors: [["ejs-autocomplete"]], contentQueries: function AutoCompleteComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c3, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c5, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c6, 1);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noRecordsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionFailureTemplate = _t.first);
    } }, inputs: { actionFailureTemplate: "actionFailureTemplate", allowCustom: "allowCustom", allowFiltering: "allowFiltering", autofill: "autofill", cssClass: "cssClass", dataSource: "dataSource", enablePersistence: "enablePersistence", enableRtl: "enableRtl", enabled: "enabled", fields: "fields", filterBarPlaceholder: "filterBarPlaceholder", filterType: "filterType", floatLabelType: "floatLabelType", footerTemplate: "footerTemplate", groupTemplate: "groupTemplate", headerTemplate: "headerTemplate", highlight: "highlight", htmlAttributes: "htmlAttributes", ignoreAccent: "ignoreAccent", ignoreCase: "ignoreCase", index: "index", itemTemplate: "itemTemplate", locale: "locale", minLength: "minLength", noRecordsTemplate: "noRecordsTemplate", placeholder: "placeholder", popupHeight: "popupHeight", popupWidth: "popupWidth", query: "query", readonly: "readonly", showClearButton: "showClearButton", showPopupButton: "showPopupButton", sortOrder: "sortOrder", suggestionCount: "suggestionCount", text: "text", value: "value", valueTemplate: "valueTemplate", width: "width", zIndex: "zIndex" }, outputs: { actionBegin: "actionBegin", actionComplete: "actionComplete", actionFailure: "actionFailure", beforeOpen: "beforeOpen", blur: "blur", change: "change", close: "close", created: "created", customValueSpecifier: "customValueSpecifier", dataBound: "dataBound", destroyed: "destroyed", filtering: "filtering", focus: "focus", open: "open", select: "select", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return AutoCompleteComponent_1; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function AutoCompleteComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutoCompleteComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-autocomplete',
                inputs: inputs$2,
                outputs: outputs$2,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return AutoCompleteComponent_1; }),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { footerTemplate: [{
            type: core.ContentChild,
            args: ['footerTemplate']
        }], headerTemplate: [{
            type: core.ContentChild,
            args: ['headerTemplate']
        }], groupTemplate: [{
            type: core.ContentChild,
            args: ['groupTemplate']
        }], itemTemplate: [{
            type: core.ContentChild,
            args: ['itemTemplate']
        }], noRecordsTemplate: [{
            type: core.ContentChild,
            args: ['noRecordsTemplate']
        }], actionFailureTemplate: [{
            type: core.ContentChild,
            args: ['actionFailureTemplate']
        }] }); })();
    return AutoCompleteComponent;
}(ej2Dropdowns.AutoComplete));
/**
 * @nocollapse
 */
exports.AutoCompleteComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.AutoCompleteComponent.propDecorators = {
    'footerTemplate': [{ type: core.ContentChild, args: ['footerTemplate',] },],
    'headerTemplate': [{ type: core.ContentChild, args: ['headerTemplate',] },],
    'groupTemplate': [{ type: core.ContentChild, args: ['groupTemplate',] },],
    'itemTemplate': [{ type: core.ContentChild, args: ['itemTemplate',] },],
    'noRecordsTemplate': [{ type: core.ContentChild, args: ['noRecordsTemplate',] },],
    'actionFailureTemplate': [{ type: core.ContentChild, args: ['actionFailureTemplate',] },],
};
__decorate$2([
    ej2AngularBase.Template(),
    __metadata$2("design:type", Object)
], exports.AutoCompleteComponent.prototype, "footerTemplate", void 0);
__decorate$2([
    ej2AngularBase.Template(),
    __metadata$2("design:type", Object)
], exports.AutoCompleteComponent.prototype, "headerTemplate", void 0);
__decorate$2([
    ej2AngularBase.Template(),
    __metadata$2("design:type", Object)
], exports.AutoCompleteComponent.prototype, "groupTemplate", void 0);
__decorate$2([
    ej2AngularBase.Template(),
    __metadata$2("design:type", Object)
], exports.AutoCompleteComponent.prototype, "itemTemplate", void 0);
__decorate$2([
    ej2AngularBase.Template('No records found'),
    __metadata$2("design:type", Object)
], exports.AutoCompleteComponent.prototype, "noRecordsTemplate", void 0);
__decorate$2([
    ej2AngularBase.Template('Request failed'),
    __metadata$2("design:type", Object)
], exports.AutoCompleteComponent.prototype, "actionFailureTemplate", void 0);
exports.AutoCompleteComponent = AutoCompleteComponent_1 = __decorate$2([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase, ej2AngularBase.FormBase]),
    __metadata$2("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.AutoCompleteComponent);
var AutoCompleteComponent_1;
/**
 * NgModule definition for the AutoComplete component.
 */
var AutoCompleteModule = /** @class */ (function () {
    function AutoCompleteModule() {
    }
AutoCompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AutoCompleteModule });
AutoCompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AutoCompleteModule_Factory(t) { return new (t || AutoCompleteModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AutoCompleteModule, { declarations: [
        /**
         * The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.
         * ```html
         * <ejs-autocomplete></ejs-autocomplete>
         * ```
         */
        exports.AutoCompleteComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.
         * ```html
         * <ejs-autocomplete></ejs-autocomplete>
         * ```
         */
        exports.AutoCompleteComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutoCompleteModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.AutoCompleteComponent
                ],
                exports: [
                    exports.AutoCompleteComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return AutoCompleteModule;
}());
/**
 * @nocollapse
 */
AutoCompleteModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the AutoComplete component with providers.
 */
var AutoCompleteAllModule = /** @class */ (function () {
    function AutoCompleteAllModule() {
    }
AutoCompleteAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AutoCompleteAllModule });
AutoCompleteAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AutoCompleteAllModule_Factory(t) { return new (t || AutoCompleteAllModule)(); }, providers: [], imports: [[common.CommonModule, AutoCompleteModule], AutoCompleteModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AutoCompleteAllModule, { imports: [ɵngcc1.CommonModule, AutoCompleteModule], exports: [AutoCompleteModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutoCompleteAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, AutoCompleteModule],
                exports: [
                    AutoCompleteModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return AutoCompleteAllModule;
}());
/**
 * @nocollapse
 */
AutoCompleteAllModule.ctorParameters = function () { return []; };
var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$3 = ['actionFailureTemplate', 'allowCustomValue', 'allowFiltering', 'changeOnBlur', 'closePopupOnSelect', 'cssClass', 'dataSource', 'delimiterChar', 'enableGroupCheckBox', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'enableSelectionOrder', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'groupTemplate', 'headerTemplate', 'hideSelectedItem', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'itemTemplate', 'locale', 'maximumSelectionLength', 'mode', 'noRecordsTemplate', 'openOnClick', 'placeholder', 'popupHeight', 'popupWidth', 'query', 'readonly', 'selectAllText', 'showClearButton', 'showDropDownIcon', 'showSelectAll', 'sortOrder', 'text', 'unSelectAllText', 'value', 'valueTemplate', 'width', 'zIndex'];
var outputs$3 = ['actionBegin', 'actionComplete', 'actionFailure', 'beforeOpen', 'blur', 'change', 'chipSelection', 'close', 'created', 'customValueSelection', 'dataBound', 'destroyed', 'filtering', 'focus', 'open', 'removed', 'removing', 'select', 'selectedAll', 'tagging', 'valueChange'];
var twoWays$3 = ['value'];
/**
 * The MultiSelect allows the user to pick a values from the predefined list of values.
 * ```html
 * <ejs-multiselect></ejs-multiselect>
 * ```
 */
exports.MultiSelectComponent = MultiSelectComponent_1 = /** @class */ (function (_super) {
    __extends(MultiSelectComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function MultiSelectComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.skipFromEvent = true;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        try {
            var mod = _this.injector.get('DropDownsCheckBoxSelection');
            if (_this.injectedModules.indexOf(mod) === -1) {
                _this.injectedModules.push(mod);
            }
        }
        catch (_a) { }
        _this.registerEvents(outputs$3);
        _this.addTwoWay.call(_this, twoWays$3);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.formContext = new ej2AngularBase.FormBase();
        _this.formCompContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    MultiSelectComponent.prototype.registerOnChange = function (registerFunction) {
    };
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    MultiSelectComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MultiSelectComponent.prototype.writeValue = function (value) {
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    MultiSelectComponent.prototype.setDisabledState = function (disabled) {
    };
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.ngOnInit = function () {
        this.formCompContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.ngAfterViewInit = function () {
        this.formContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.ngOnDestroy = function () {
        this.formCompContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.ngAfterContentChecked = function () {
        this.formCompContext.ngAfterContentChecked(this);
    };
MultiSelectComponent.ɵfac = function MultiSelectComponent_Factory(t) { return new (t || MultiSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
MultiSelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MultiSelectComponent, selectors: [["ejs-multiselect"]], contentQueries: function MultiSelectComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c5, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c6, 1);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.valueTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noRecordsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionFailureTemplate = _t.first);
    } }, inputs: { actionFailureTemplate: "actionFailureTemplate", allowCustomValue: "allowCustomValue", allowFiltering: "allowFiltering", changeOnBlur: "changeOnBlur", closePopupOnSelect: "closePopupOnSelect", cssClass: "cssClass", dataSource: "dataSource", delimiterChar: "delimiterChar", enableGroupCheckBox: "enableGroupCheckBox", enableHtmlSanitizer: "enableHtmlSanitizer", enablePersistence: "enablePersistence", enableRtl: "enableRtl", enableSelectionOrder: "enableSelectionOrder", enabled: "enabled", fields: "fields", filterBarPlaceholder: "filterBarPlaceholder", filterType: "filterType", floatLabelType: "floatLabelType", footerTemplate: "footerTemplate", groupTemplate: "groupTemplate", headerTemplate: "headerTemplate", hideSelectedItem: "hideSelectedItem", htmlAttributes: "htmlAttributes", ignoreAccent: "ignoreAccent", ignoreCase: "ignoreCase", itemTemplate: "itemTemplate", locale: "locale", maximumSelectionLength: "maximumSelectionLength", mode: "mode", noRecordsTemplate: "noRecordsTemplate", openOnClick: "openOnClick", placeholder: "placeholder", popupHeight: "popupHeight", popupWidth: "popupWidth", query: "query", readonly: "readonly", selectAllText: "selectAllText", showClearButton: "showClearButton", showDropDownIcon: "showDropDownIcon", showSelectAll: "showSelectAll", sortOrder: "sortOrder", text: "text", unSelectAllText: "unSelectAllText", value: "value", valueTemplate: "valueTemplate", width: "width", zIndex: "zIndex" }, outputs: { actionBegin: "actionBegin", actionComplete: "actionComplete", actionFailure: "actionFailure", beforeOpen: "beforeOpen", blur: "blur", change: "change", chipSelection: "chipSelection", close: "close", created: "created", customValueSelection: "customValueSelection", dataBound: "dataBound", destroyed: "destroyed", filtering: "filtering", focus: "focus", open: "open", removed: "removed", removing: "removing", select: "select", selectedAll: "selectedAll", tagging: "tagging", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return MultiSelectComponent_1; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function MultiSelectComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MultiSelectComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-multiselect',
                inputs: inputs$3,
                outputs: outputs$3,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return MultiSelectComponent_1; }),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { footerTemplate: [{
            type: core.ContentChild,
            args: ['footerTemplate']
        }], headerTemplate: [{
            type: core.ContentChild,
            args: ['headerTemplate']
        }], valueTemplate: [{
            type: core.ContentChild,
            args: ['valueTemplate']
        }], itemTemplate: [{
            type: core.ContentChild,
            args: ['itemTemplate']
        }], noRecordsTemplate: [{
            type: core.ContentChild,
            args: ['noRecordsTemplate']
        }], actionFailureTemplate: [{
            type: core.ContentChild,
            args: ['actionFailureTemplate']
        }] }); })();
    return MultiSelectComponent;
}(ej2Dropdowns.MultiSelect));
/**
 * @nocollapse
 */
exports.MultiSelectComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.MultiSelectComponent.propDecorators = {
    'footerTemplate': [{ type: core.ContentChild, args: ['footerTemplate',] },],
    'headerTemplate': [{ type: core.ContentChild, args: ['headerTemplate',] },],
    'valueTemplate': [{ type: core.ContentChild, args: ['valueTemplate',] },],
    'itemTemplate': [{ type: core.ContentChild, args: ['itemTemplate',] },],
    'noRecordsTemplate': [{ type: core.ContentChild, args: ['noRecordsTemplate',] },],
    'actionFailureTemplate': [{ type: core.ContentChild, args: ['actionFailureTemplate',] },],
};
__decorate$3([
    ej2AngularBase.Template(),
    __metadata$3("design:type", Object)
], exports.MultiSelectComponent.prototype, "footerTemplate", void 0);
__decorate$3([
    ej2AngularBase.Template(),
    __metadata$3("design:type", Object)
], exports.MultiSelectComponent.prototype, "headerTemplate", void 0);
__decorate$3([
    ej2AngularBase.Template(),
    __metadata$3("design:type", Object)
], exports.MultiSelectComponent.prototype, "valueTemplate", void 0);
__decorate$3([
    ej2AngularBase.Template(),
    __metadata$3("design:type", Object)
], exports.MultiSelectComponent.prototype, "itemTemplate", void 0);
__decorate$3([
    ej2AngularBase.Template('No records found'),
    __metadata$3("design:type", Object)
], exports.MultiSelectComponent.prototype, "noRecordsTemplate", void 0);
__decorate$3([
    ej2AngularBase.Template('Request failed'),
    __metadata$3("design:type", Object)
], exports.MultiSelectComponent.prototype, "actionFailureTemplate", void 0);
exports.MultiSelectComponent = MultiSelectComponent_1 = __decorate$3([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase, ej2AngularBase.FormBase]),
    __metadata$3("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.MultiSelectComponent);
var MultiSelectComponent_1;
/**
 * NgModule definition for the MultiSelect component.
 */
var MultiSelectModule = /** @class */ (function () {
    function MultiSelectModule() {
    }
MultiSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MultiSelectModule });
MultiSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MultiSelectModule_Factory(t) { return new (t || MultiSelectModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MultiSelectModule, { declarations: [
        /**
         * The MultiSelect allows the user to pick a values from the predefined list of values.
         * ```html
         * <ejs-multiselect></ejs-multiselect>
         * ```
         */
        exports.MultiSelectComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * The MultiSelect allows the user to pick a values from the predefined list of values.
         * ```html
         * <ejs-multiselect></ejs-multiselect>
         * ```
         */
        exports.MultiSelectComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MultiSelectModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.MultiSelectComponent
                ],
                exports: [
                    exports.MultiSelectComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return MultiSelectModule;
}());
/**
 * @nocollapse
 */
MultiSelectModule.ctorParameters = function () { return []; };
var CheckBoxSelectionService = { provide: 'DropDownsCheckBoxSelection', useValue: ej2Dropdowns.CheckBoxSelection };
/**
 * NgModule definition for the MultiSelect component with providers.
 */
var MultiSelectAllModule = /** @class */ (function () {
    function MultiSelectAllModule() {
    }
MultiSelectAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MultiSelectAllModule });
MultiSelectAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MultiSelectAllModule_Factory(t) { return new (t || MultiSelectAllModule)(); }, providers: [
        CheckBoxSelectionService
    ], imports: [[common.CommonModule, MultiSelectModule], MultiSelectModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MultiSelectAllModule, { imports: [ɵngcc1.CommonModule, MultiSelectModule], exports: [MultiSelectModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MultiSelectAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, MultiSelectModule],
                exports: [
                    MultiSelectModule
                ],
                providers: [
                    CheckBoxSelectionService
                ]
            }]
    }], function () { return []; }, null); })();
    return MultiSelectAllModule;
}());
/**
 * @nocollapse
 */
MultiSelectAllModule.ctorParameters = function () { return []; };
var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$4 = ['actionFailureTemplate', 'allowDragAndDrop', 'allowFiltering', 'cssClass', 'dataSource', 'enablePersistence', 'enableRtl', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'groupTemplate', 'height', 'ignoreAccent', 'ignoreCase', 'itemTemplate', 'locale', 'maximumSelectionLength', 'noRecordsTemplate', 'query', 'scope', 'selectionSettings', 'sortOrder', 'toolbarSettings', 'value', 'zIndex'];
var outputs$4 = ['focus', 'blur', 'actionBegin', 'actionComplete', 'actionFailure', 'beforeDrop', 'beforeItemRender', 'change', 'created', 'dataBound', 'destroyed', 'drag', 'dragStart', 'drop', 'filtering', 'select', 'valueChange'];
var twoWays$4 = ['value'];
/**
 * The ListBox allows the user to select values from the predefined list of values.
 * ```html
 * <ejs-listbox [dataSource]='data'></ejs-listbox>
 * ```
 */
exports.ListBoxComponent = ListBoxComponent_1 = /** @class */ (function (_super) {
    __extends(ListBoxComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function ListBoxComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        try {
            var mod = _this.injector.get('DropDownsCheckBoxSelection');
            if (_this.injectedModules.indexOf(mod) === -1) {
                _this.injectedModules.push(mod);
            }
        }
        catch (_a) { }
        _this.registerEvents(outputs$4);
        _this.addTwoWay.call(_this, twoWays$4);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.formContext = new ej2AngularBase.FormBase();
        _this.formCompContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    ListBoxComponent.prototype.registerOnChange = function (registerFunction) {
    };
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    ListBoxComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ListBoxComponent.prototype.writeValue = function (value) {
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    ListBoxComponent.prototype.setDisabledState = function (disabled) {
    };
    /**
     * @return {?}
     */
    ListBoxComponent.prototype.ngOnInit = function () {
        this.formCompContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    ListBoxComponent.prototype.ngAfterViewInit = function () {
        this.formContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    ListBoxComponent.prototype.ngOnDestroy = function () {
        this.formCompContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    ListBoxComponent.prototype.ngAfterContentChecked = function () {
        this.formCompContext.ngAfterContentChecked(this);
    };
ListBoxComponent.ɵfac = function ListBoxComponent_Factory(t) { return new (t || ListBoxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
ListBoxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ListBoxComponent, selectors: [["ejs-listbox"]], contentQueries: function ListBoxComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, 1);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
    } }, inputs: { actionFailureTemplate: "actionFailureTemplate", allowDragAndDrop: "allowDragAndDrop", allowFiltering: "allowFiltering", cssClass: "cssClass", dataSource: "dataSource", enablePersistence: "enablePersistence", enableRtl: "enableRtl", enabled: "enabled", fields: "fields", filterBarPlaceholder: "filterBarPlaceholder", filterType: "filterType", groupTemplate: "groupTemplate", height: "height", ignoreAccent: "ignoreAccent", ignoreCase: "ignoreCase", itemTemplate: "itemTemplate", locale: "locale", maximumSelectionLength: "maximumSelectionLength", noRecordsTemplate: "noRecordsTemplate", query: "query", scope: "scope", selectionSettings: "selectionSettings", sortOrder: "sortOrder", toolbarSettings: "toolbarSettings", value: "value", zIndex: "zIndex" }, outputs: { focus: "focus", blur: "blur", actionBegin: "actionBegin", actionComplete: "actionComplete", actionFailure: "actionFailure", beforeDrop: "beforeDrop", beforeItemRender: "beforeItemRender", change: "change", created: "created", dataBound: "dataBound", destroyed: "destroyed", drag: "drag", dragStart: "dragStart", drop: "drop", filtering: "filtering", select: "select", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return ListBoxComponent_1; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function ListBoxComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListBoxComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-listbox',
                inputs: inputs$4,
                outputs: outputs$4,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return ListBoxComponent_1; }),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { itemTemplate: [{
            type: core.ContentChild,
            args: ['itemTemplate']
        }] }); })();
    return ListBoxComponent;
}(ej2Dropdowns.ListBox));
/**
 * @nocollapse
 */
exports.ListBoxComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.ListBoxComponent.propDecorators = {
    'itemTemplate': [{ type: core.ContentChild, args: ['itemTemplate',] },],
};
__decorate$4([
    ej2AngularBase.Template(),
    __metadata$4("design:type", Object)
], exports.ListBoxComponent.prototype, "itemTemplate", void 0);
exports.ListBoxComponent = ListBoxComponent_1 = __decorate$4([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase, ej2AngularBase.FormBase]),
    __metadata$4("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.ListBoxComponent);
var ListBoxComponent_1;
/**
 * NgModule definition for the ListBox component.
 */
var ListBoxModule = /** @class */ (function () {
    function ListBoxModule() {
    }
ListBoxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ListBoxModule });
ListBoxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ListBoxModule_Factory(t) { return new (t || ListBoxModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListBoxModule, { declarations: [
        /**
         * The ListBox allows the user to select values from the predefined list of values.
         * ```html
         * <ejs-listbox [dataSource]='data'></ejs-listbox>
         * ```
         */
        exports.ListBoxComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * The ListBox allows the user to select values from the predefined list of values.
         * ```html
         * <ejs-listbox [dataSource]='data'></ejs-listbox>
         * ```
         */
        exports.ListBoxComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListBoxModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.ListBoxComponent
                ],
                exports: [
                    exports.ListBoxComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return ListBoxModule;
}());
/**
 * @nocollapse
 */
ListBoxModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the ListBox component with providers.
 */
var ListBoxAllModule = /** @class */ (function () {
    function ListBoxAllModule() {
    }
ListBoxAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ListBoxAllModule });
ListBoxAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ListBoxAllModule_Factory(t) { return new (t || ListBoxAllModule)(); }, providers: [], imports: [[common.CommonModule, ListBoxModule], ListBoxModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListBoxAllModule, { imports: [ɵngcc1.CommonModule, ListBoxModule], exports: [ListBoxModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListBoxAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, ListBoxModule],
                exports: [
                    ListBoxModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return ListBoxAllModule;
}());
/**
 * @nocollapse
 */
ListBoxAllModule.ctorParameters = function () { return []; };
var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$5 = ['actionFailureTemplate', 'allowFiltering', 'allowMultiSelection', 'changeOnBlur', 'cssClass', 'delimiterChar', 'enablePersistence', 'enableRtl', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'headerTemplate', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'itemTemplate', 'locale', 'mode', 'noRecordsTemplate', 'placeholder', 'popupHeight', 'popupWidth', 'readonly', 'selectAllText', 'showCheckBox', 'showClearButton', 'showDropDownIcon', 'showSelectAll', 'sortOrder', 'text', 'treeSettings', 'unSelectAllText', 'value', 'width', 'wrapText', 'zIndex'];
var outputs$5 = ['actionFailure', 'beforeOpen', 'blur', 'change', 'close', 'created', 'dataBound', 'destroyed', 'filtering', 'focus', 'keyPress', 'open', 'select', 'valueChange'];
var twoWays$5 = ['value'];
/**
 * The DropDownTree component contains a list of predefined values from which you can choose a single or multiple values.
 * ```html
 * <ejs-dropdowntree></ejs-dropdowntree>
 * ```
 */
exports.DropDownTreeComponent = DropDownTreeComponent_1 = /** @class */ (function (_super) {
    __extends(DropDownTreeComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function DropDownTreeComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.skipFromEvent = true;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$5);
        _this.addTwoWay.call(_this, twoWays$5);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.formContext = new ej2AngularBase.FormBase();
        _this.formCompContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    DropDownTreeComponent.prototype.registerOnChange = function (registerFunction) {
    };
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    DropDownTreeComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DropDownTreeComponent.prototype.writeValue = function (value) {
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    DropDownTreeComponent.prototype.setDisabledState = function (disabled) {
    };
    /**
     * @return {?}
     */
    DropDownTreeComponent.prototype.ngOnInit = function () {
        this.formCompContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    DropDownTreeComponent.prototype.ngAfterViewInit = function () {
        this.formContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    DropDownTreeComponent.prototype.ngOnDestroy = function () {
        this.formCompContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    DropDownTreeComponent.prototype.ngAfterContentChecked = function () {
        this.formCompContext.ngAfterContentChecked(this);
    };
DropDownTreeComponent.ɵfac = function DropDownTreeComponent_Factory(t) { return new (t || DropDownTreeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
DropDownTreeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropDownTreeComponent, selectors: [["ejs-dropdowntree"]], contentQueries: function DropDownTreeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c5, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c6, 1);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noRecordsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionFailureTemplate = _t.first);
    } }, inputs: { actionFailureTemplate: "actionFailureTemplate", allowFiltering: "allowFiltering", allowMultiSelection: "allowMultiSelection", changeOnBlur: "changeOnBlur", cssClass: "cssClass", delimiterChar: "delimiterChar", enablePersistence: "enablePersistence", enableRtl: "enableRtl", enabled: "enabled", fields: "fields", filterBarPlaceholder: "filterBarPlaceholder", filterType: "filterType", floatLabelType: "floatLabelType", footerTemplate: "footerTemplate", headerTemplate: "headerTemplate", htmlAttributes: "htmlAttributes", ignoreAccent: "ignoreAccent", ignoreCase: "ignoreCase", itemTemplate: "itemTemplate", locale: "locale", mode: "mode", noRecordsTemplate: "noRecordsTemplate", placeholder: "placeholder", popupHeight: "popupHeight", popupWidth: "popupWidth", readonly: "readonly", selectAllText: "selectAllText", showCheckBox: "showCheckBox", showClearButton: "showClearButton", showDropDownIcon: "showDropDownIcon", showSelectAll: "showSelectAll", sortOrder: "sortOrder", text: "text", treeSettings: "treeSettings", unSelectAllText: "unSelectAllText", value: "value", width: "width", wrapText: "wrapText", zIndex: "zIndex" }, outputs: { actionFailure: "actionFailure", beforeOpen: "beforeOpen", blur: "blur", change: "change", close: "close", created: "created", dataBound: "dataBound", destroyed: "destroyed", filtering: "filtering", focus: "focus", keyPress: "keyPress", open: "open", select: "select", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return DropDownTreeComponent_1; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DropDownTreeComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropDownTreeComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-dropdowntree',
                inputs: inputs$5,
                outputs: outputs$5,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return DropDownTreeComponent_1; }),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { footerTemplate: [{
            type: core.ContentChild,
            args: ['footerTemplate']
        }], headerTemplate: [{
            type: core.ContentChild,
            args: ['headerTemplate']
        }], itemTemplate: [{
            type: core.ContentChild,
            args: ['itemTemplate']
        }], noRecordsTemplate: [{
            type: core.ContentChild,
            args: ['noRecordsTemplate']
        }], actionFailureTemplate: [{
            type: core.ContentChild,
            args: ['actionFailureTemplate']
        }] }); })();
    return DropDownTreeComponent;
}(ej2Dropdowns.DropDownTree));
/**
 * @nocollapse
 */
exports.DropDownTreeComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.DropDownTreeComponent.propDecorators = {
    'footerTemplate': [{ type: core.ContentChild, args: ['footerTemplate',] },],
    'headerTemplate': [{ type: core.ContentChild, args: ['headerTemplate',] },],
    'itemTemplate': [{ type: core.ContentChild, args: ['itemTemplate',] },],
    'noRecordsTemplate': [{ type: core.ContentChild, args: ['noRecordsTemplate',] },],
    'actionFailureTemplate': [{ type: core.ContentChild, args: ['actionFailureTemplate',] },],
};
__decorate$5([
    ej2AngularBase.Template(),
    __metadata$5("design:type", Object)
], exports.DropDownTreeComponent.prototype, "footerTemplate", void 0);
__decorate$5([
    ej2AngularBase.Template(),
    __metadata$5("design:type", Object)
], exports.DropDownTreeComponent.prototype, "headerTemplate", void 0);
__decorate$5([
    ej2AngularBase.Template(),
    __metadata$5("design:type", Object)
], exports.DropDownTreeComponent.prototype, "itemTemplate", void 0);
__decorate$5([
    ej2AngularBase.Template('No records found'),
    __metadata$5("design:type", Object)
], exports.DropDownTreeComponent.prototype, "noRecordsTemplate", void 0);
__decorate$5([
    ej2AngularBase.Template('Request failed'),
    __metadata$5("design:type", Object)
], exports.DropDownTreeComponent.prototype, "actionFailureTemplate", void 0);
exports.DropDownTreeComponent = DropDownTreeComponent_1 = __decorate$5([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase, ej2AngularBase.FormBase]),
    __metadata$5("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.DropDownTreeComponent);
var DropDownTreeComponent_1;
/**
 * NgModule definition for the DropDownTree component.
 */
var DropDownTreeModule = /** @class */ (function () {
    function DropDownTreeModule() {
    }
DropDownTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DropDownTreeModule });
DropDownTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DropDownTreeModule_Factory(t) { return new (t || DropDownTreeModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropDownTreeModule, { declarations: [
        /**
         * The DropDownTree component contains a list of predefined values from which you can choose a single or multiple values.
         * ```html
         * <ejs-dropdowntree></ejs-dropdowntree>
         * ```
         */
        exports.DropDownTreeComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * The DropDownTree component contains a list of predefined values from which you can choose a single or multiple values.
         * ```html
         * <ejs-dropdowntree></ejs-dropdowntree>
         * ```
         */
        exports.DropDownTreeComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropDownTreeModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.DropDownTreeComponent
                ],
                exports: [
                    exports.DropDownTreeComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DropDownTreeModule;
}());
/**
 * @nocollapse
 */
DropDownTreeModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the DropDownTree component with providers.
 */
var DropDownTreeAllModule = /** @class */ (function () {
    function DropDownTreeAllModule() {
    }
DropDownTreeAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DropDownTreeAllModule });
DropDownTreeAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DropDownTreeAllModule_Factory(t) { return new (t || DropDownTreeAllModule)(); }, providers: [], imports: [[common.CommonModule, DropDownTreeModule], DropDownTreeModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropDownTreeAllModule, { imports: [ɵngcc1.CommonModule, DropDownTreeModule], exports: [DropDownTreeModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropDownTreeAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, DropDownTreeModule],
                exports: [
                    DropDownTreeModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return DropDownTreeAllModule;
}());
/**
 * @nocollapse
 */
DropDownTreeAllModule.ctorParameters = function () { return []; };

exports.DropDownListModule = DropDownListModule;
exports.DropDownListAllModule = DropDownListAllModule;
exports.ComboBoxModule = ComboBoxModule;
exports.ComboBoxAllModule = ComboBoxAllModule;
exports.AutoCompleteModule = AutoCompleteModule;
exports.AutoCompleteAllModule = AutoCompleteAllModule;
exports.MultiSelectModule = MultiSelectModule;
exports.MultiSelectAllModule = MultiSelectAllModule;
exports.CheckBoxSelectionService = CheckBoxSelectionService;
exports.ListBoxModule = ListBoxModule;
exports.ListBoxAllModule = ListBoxAllModule;
exports.DropDownTreeModule = DropDownTreeModule;
exports.DropDownTreeAllModule = DropDownTreeAllModule;
exports.ɵe = inputs$2;
exports.ɵf = outputs$2;
exports.ɵc = inputs$1;
exports.ɵd = outputs$1;
exports.ɵa = inputs;
exports.ɵb = outputs;
exports.ɵk = inputs$5;
exports.ɵl = outputs$5;
exports.ɵi = inputs$4;
exports.ɵj = outputs$4;
exports.ɵg = inputs$3;
exports.ɵh = outputs$3;
exports.incrementalSearch = ej2Dropdowns.incrementalSearch;
exports.Search = ej2Dropdowns.Search;
exports.highlightSearch = ej2Dropdowns.highlightSearch;
exports.revertHighlightSearch = ej2Dropdowns.revertHighlightSearch;
exports.FieldSettings = ej2Dropdowns.FieldSettings;
exports.dropDownBaseClasses = ej2Dropdowns.dropDownBaseClasses;
exports.DropDownBase = ej2Dropdowns.DropDownBase;
exports.dropDownListClasses = ej2Dropdowns.dropDownListClasses;
exports.DropDownList = ej2Dropdowns.DropDownList;
exports.Fields = ej2Dropdowns.Fields;
exports.TreeSettings = ej2Dropdowns.TreeSettings;
exports.DropDownTree = ej2Dropdowns.DropDownTree;
exports.ComboBox = ej2Dropdowns.ComboBox;
exports.AutoComplete = ej2Dropdowns.AutoComplete;
exports.MultiSelect = ej2Dropdowns.MultiSelect;
exports.CheckBoxSelection = ej2Dropdowns.CheckBoxSelection;
exports.createFloatLabel = ej2Dropdowns.createFloatLabel;
exports.updateFloatLabelState = ej2Dropdowns.updateFloatLabelState;
exports.removeFloating = ej2Dropdowns.removeFloating;
exports.setPlaceHolder = ej2Dropdowns.setPlaceHolder;
exports.floatLabelFocus = ej2Dropdowns.floatLabelFocus;
exports.floatLabelBlur = ej2Dropdowns.floatLabelBlur;
exports.SelectionSettings = ej2Dropdowns.SelectionSettings;
exports.ToolbarSettings = ej2Dropdowns.ToolbarSettings;
exports.ListBox = ej2Dropdowns.ListBox;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ej2-angular-dropdowns.umd.js.map