/*!
*  filename: ej2-angular-buttons.umd.js
*  version : 18.4.44
*  Copyright Syncfusion Inc. 2001 - 2020. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@syncfusion/ej2-angular-base'), require('@syncfusion/ej2-buttons'), require('@angular/common'), require('@angular/forms')) :
	typeof define === 'function' && define.amd ? define(['@angular/core','@angular/common','exports', '@angular/core', '@syncfusion/ej2-angular-base', '@syncfusion/ej2-buttons', '@angular/common', '@angular/forms'], factory) :
	(factory(global.ng.core,global.ng.common,(global['ej2-angular-buttons'] = {}),global.ng.core,global.ej2.angular.base,global.ej2.buttons,global.ng.common,global.ng.forms));
}(this, (function (ɵngcc0,ɵngcc1,exports,core,ej2AngularBase,ej2Buttons,common,forms) { 
var _c0 = ["ejs-button", ""];
var _c1 = ["*"];
'use strict';

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs = ['content', 'cssClass', 'disabled', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'iconCss', 'iconPosition', 'isPrimary', 'isToggle', 'locale'];
var outputs = ['created'];
var twoWays = [];
/**
 * Represents the Angular Button Component.
 * ```html
 * <button ejs-button>Button</button>
 * ```
 */
exports.ButtonComponent = /** @class */ (function (_super) {
    __extends(ButtonComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function ButtonComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs);
        _this.addTwoWay.call(_this, twoWays);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.containerContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @return {?}
     */
    ButtonComponent.prototype.ngOnInit = function () {
        this.containerContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    ButtonComponent.prototype.ngAfterViewInit = function () {
        this.containerContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    ButtonComponent.prototype.ngOnDestroy = function () {
        this.containerContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    ButtonComponent.prototype.ngAfterContentChecked = function () {
        this.containerContext.ngAfterContentChecked(this);
    };
ButtonComponent.ɵfac = function ButtonComponent_Factory(t) { return new (t || ButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
ButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ButtonComponent, selectors: [["", "ejs-button", ""]], inputs: { content: "content", cssClass: "cssClass", disabled: "disabled", enableHtmlSanitizer: "enableHtmlSanitizer", enablePersistence: "enablePersistence", enableRtl: "enableRtl", iconCss: "iconCss", iconPosition: "iconPosition", isPrimary: "isPrimary", isToggle: "isToggle", locale: "locale" }, outputs: { created: "created" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 1, vars: 0, template: function ButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonComponent, [{
        type: core.Component,
        args: [{
                selector: '[ejs-button]',
                inputs: inputs,
                outputs: outputs,
                template: "<ng-content ></ng-content>",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return ButtonComponent;
}(ej2Buttons.Button));
/**
 * @nocollapse
 */
exports.ButtonComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.ButtonComponent = __decorate([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase]),
    __metadata("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.ButtonComponent);
/**
 * NgModule definition for the Button component.
 */
var ButtonModule = /** @class */ (function () {
    function ButtonModule() {
    }
ButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ButtonModule });
ButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ButtonModule_Factory(t) { return new (t || ButtonModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ButtonModule, { declarations: [
        /**
         * Represents the Angular Button Component.
         * ```html
         * <button ejs-button>Button</button>
         * ```
         */
        exports.ButtonComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * Represents the Angular Button Component.
         * ```html
         * <button ejs-button>Button</button>
         * ```
         */
        exports.ButtonComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.ButtonComponent
                ],
                exports: [
                    exports.ButtonComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return ButtonModule;
}());
/**
 * @nocollapse
 */
ButtonModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the Button component with providers.
 */
var ButtonAllModule = /** @class */ (function () {
    function ButtonAllModule() {
    }
ButtonAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ButtonAllModule });
ButtonAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ButtonAllModule_Factory(t) { return new (t || ButtonAllModule)(); }, providers: [], imports: [[common.CommonModule, ButtonModule], ButtonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ButtonAllModule, { imports: [ɵngcc1.CommonModule, ButtonModule], exports: [ButtonModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, ButtonModule],
                exports: [
                    ButtonModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return ButtonAllModule;
}());
/**
 * @nocollapse
 */
ButtonAllModule.ctorParameters = function () { return []; };
var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$1 = ['checked', 'cssClass', 'disabled', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'htmlAttributes', 'indeterminate', 'label', 'labelPosition', 'locale', 'name', 'value'];
var outputs$1 = ['focus', 'blur', 'change', 'created', 'checkedChange', 'indeterminateChange'];
var twoWays$1 = ['checked', 'indeterminate'];
/**
 * Represents the Angular CheckBox Component.
 * ```html
 * <ejs-checkbox label='Default'></ejs-checkbox>
 * ```
 */
exports.CheckBoxComponent = CheckBoxComponent_1 = /** @class */ (function (_super) {
    __extends(CheckBoxComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function CheckBoxComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$1);
        _this.addTwoWay.call(_this, twoWays$1);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.formContext = new ej2AngularBase.FormBase();
        _this.formCompContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    CheckBoxComponent.prototype.registerOnChange = function (registerFunction) {
    };
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    CheckBoxComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CheckBoxComponent.prototype.writeValue = function (value) {
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    CheckBoxComponent.prototype.setDisabledState = function (disabled) {
    };
    /**
     * @return {?}
     */
    CheckBoxComponent.prototype.ngOnInit = function () {
        this.formCompContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    CheckBoxComponent.prototype.ngAfterViewInit = function () {
        this.formContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    CheckBoxComponent.prototype.ngOnDestroy = function () {
        this.formCompContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    CheckBoxComponent.prototype.ngAfterContentChecked = function () {
        this.formCompContext.ngAfterContentChecked(this);
    };
CheckBoxComponent.ɵfac = function CheckBoxComponent_Factory(t) { return new (t || CheckBoxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
CheckBoxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CheckBoxComponent, selectors: [["ejs-checkbox"]], inputs: { checked: "checked", cssClass: "cssClass", disabled: "disabled", enableHtmlSanitizer: "enableHtmlSanitizer", enablePersistence: "enablePersistence", enableRtl: "enableRtl", htmlAttributes: "htmlAttributes", indeterminate: "indeterminate", label: "label", labelPosition: "labelPosition", locale: "locale", name: "name", value: "value" }, outputs: { focus: "focus", blur: "blur", change: "change", created: "created", checkedChange: "checkedChange", indeterminateChange: "indeterminateChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return CheckBoxComponent_1; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function CheckBoxComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckBoxComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-checkbox',
                inputs: inputs$1,
                outputs: outputs$1,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return CheckBoxComponent_1; }),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return CheckBoxComponent;
}(ej2Buttons.CheckBox));
/**
 * @nocollapse
 */
exports.CheckBoxComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.CheckBoxComponent = CheckBoxComponent_1 = __decorate$1([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase, ej2AngularBase.FormBase]),
    __metadata$1("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.CheckBoxComponent);
var CheckBoxComponent_1;
/**
 * NgModule definition for the CheckBox component.
 */
var CheckBoxModule = /** @class */ (function () {
    function CheckBoxModule() {
    }
CheckBoxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CheckBoxModule });
CheckBoxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CheckBoxModule_Factory(t) { return new (t || CheckBoxModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckBoxModule, { declarations: [
        /**
         * Represents the Angular CheckBox Component.
         * ```html
         * <ejs-checkbox label='Default'></ejs-checkbox>
         * ```
         */
        exports.CheckBoxComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * Represents the Angular CheckBox Component.
         * ```html
         * <ejs-checkbox label='Default'></ejs-checkbox>
         * ```
         */
        exports.CheckBoxComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckBoxModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.CheckBoxComponent
                ],
                exports: [
                    exports.CheckBoxComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return CheckBoxModule;
}());
/**
 * @nocollapse
 */
CheckBoxModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the CheckBox component with providers.
 */
var CheckBoxAllModule = /** @class */ (function () {
    function CheckBoxAllModule() {
    }
CheckBoxAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CheckBoxAllModule });
CheckBoxAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CheckBoxAllModule_Factory(t) { return new (t || CheckBoxAllModule)(); }, providers: [], imports: [[common.CommonModule, CheckBoxModule], CheckBoxModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckBoxAllModule, { imports: [ɵngcc1.CommonModule, CheckBoxModule], exports: [CheckBoxModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckBoxAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, CheckBoxModule],
                exports: [
                    CheckBoxModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return CheckBoxAllModule;
}());
/**
 * @nocollapse
 */
CheckBoxAllModule.ctorParameters = function () { return []; };
var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$2 = ['checked', 'cssClass', 'disabled', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'htmlAttributes', 'label', 'labelPosition', 'locale', 'name', 'value'];
var outputs$2 = ['focus', 'blur', 'change', 'created', 'valueChange'];
var twoWays$2 = ['value'];
/**
 * Represents the Angular RadioButton Component.
 * ```html
 * <ejs-radiobutton label='Default'></ejs-radiobutton>
 * ```
 */
exports.RadioButtonComponent = RadioButtonComponent_1 = /** @class */ (function (_super) {
    __extends(RadioButtonComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function RadioButtonComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$2);
        _this.addTwoWay.call(_this, twoWays$2);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.formContext = new ej2AngularBase.FormBase();
        _this.formCompContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    RadioButtonComponent.prototype.registerOnChange = function (registerFunction) {
    };
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    RadioButtonComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RadioButtonComponent.prototype.writeValue = function (value) {
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    RadioButtonComponent.prototype.setDisabledState = function (disabled) {
    };
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype.ngOnInit = function () {
        this.formCompContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype.ngAfterViewInit = function () {
        this.formContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype.ngOnDestroy = function () {
        this.formCompContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype.ngAfterContentChecked = function () {
        this.formCompContext.ngAfterContentChecked(this);
    };
RadioButtonComponent.ɵfac = function RadioButtonComponent_Factory(t) { return new (t || RadioButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
RadioButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: RadioButtonComponent, selectors: [["ejs-radiobutton"]], inputs: { checked: "checked", cssClass: "cssClass", disabled: "disabled", enableHtmlSanitizer: "enableHtmlSanitizer", enablePersistence: "enablePersistence", enableRtl: "enableRtl", htmlAttributes: "htmlAttributes", label: "label", labelPosition: "labelPosition", locale: "locale", name: "name", value: "value" }, outputs: { focus: "focus", blur: "blur", change: "change", created: "created", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return RadioButtonComponent_1; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function RadioButtonComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RadioButtonComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-radiobutton',
                inputs: inputs$2,
                outputs: outputs$2,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return RadioButtonComponent_1; }),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return RadioButtonComponent;
}(ej2Buttons.RadioButton));
/**
 * @nocollapse
 */
exports.RadioButtonComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.RadioButtonComponent = RadioButtonComponent_1 = __decorate$2([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase, ej2AngularBase.FormBase]),
    __metadata$2("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.RadioButtonComponent);
var RadioButtonComponent_1;
/**
 * NgModule definition for the RadioButton component.
 */
var RadioButtonModule = /** @class */ (function () {
    function RadioButtonModule() {
    }
RadioButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: RadioButtonModule });
RadioButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function RadioButtonModule_Factory(t) { return new (t || RadioButtonModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RadioButtonModule, { declarations: [
        /**
         * Represents the Angular RadioButton Component.
         * ```html
         * <ejs-radiobutton label='Default'></ejs-radiobutton>
         * ```
         */
        exports.RadioButtonComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * Represents the Angular RadioButton Component.
         * ```html
         * <ejs-radiobutton label='Default'></ejs-radiobutton>
         * ```
         */
        exports.RadioButtonComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RadioButtonModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.RadioButtonComponent
                ],
                exports: [
                    exports.RadioButtonComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return RadioButtonModule;
}());
/**
 * @nocollapse
 */
RadioButtonModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the RadioButton component with providers.
 */
var RadioButtonAllModule = /** @class */ (function () {
    function RadioButtonAllModule() {
    }
RadioButtonAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: RadioButtonAllModule });
RadioButtonAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function RadioButtonAllModule_Factory(t) { return new (t || RadioButtonAllModule)(); }, providers: [], imports: [[common.CommonModule, RadioButtonModule], RadioButtonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RadioButtonAllModule, { imports: [ɵngcc1.CommonModule, RadioButtonModule], exports: [RadioButtonModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RadioButtonAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, RadioButtonModule],
                exports: [
                    RadioButtonModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return RadioButtonAllModule;
}());
/**
 * @nocollapse
 */
RadioButtonAllModule.ctorParameters = function () { return []; };
var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$3 = ['checked', 'cssClass', 'disabled', 'enablePersistence', 'enableRtl', 'locale', 'name', 'offLabel', 'onLabel', 'value'];
var outputs$3 = ['focus', 'blur', 'change', 'created', 'checkedChange'];
var twoWays$3 = ['checked'];
/**
 * Represents the Angular Switch Component.
 * ```html
 * <ejs-switch></ejs-switch>
 * ```
 */
exports.SwitchComponent = SwitchComponent_1 = /** @class */ (function (_super) {
    __extends(SwitchComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function SwitchComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$3);
        _this.addTwoWay.call(_this, twoWays$3);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.formContext = new ej2AngularBase.FormBase();
        _this.formCompContext = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    SwitchComponent.prototype.registerOnChange = function (registerFunction) {
    };
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    SwitchComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SwitchComponent.prototype.writeValue = function (value) {
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    SwitchComponent.prototype.setDisabledState = function (disabled) {
    };
    /**
     * @return {?}
     */
    SwitchComponent.prototype.ngOnInit = function () {
        this.formCompContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    SwitchComponent.prototype.ngAfterViewInit = function () {
        this.formContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    SwitchComponent.prototype.ngOnDestroy = function () {
        this.formCompContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    SwitchComponent.prototype.ngAfterContentChecked = function () {
        this.formCompContext.ngAfterContentChecked(this);
    };
SwitchComponent.ɵfac = function SwitchComponent_Factory(t) { return new (t || SwitchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
SwitchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SwitchComponent, selectors: [["ejs-switch"]], inputs: { checked: "checked", cssClass: "cssClass", disabled: "disabled", enablePersistence: "enablePersistence", enableRtl: "enableRtl", locale: "locale", name: "name", offLabel: "offLabel", onLabel: "onLabel", value: "value" }, outputs: { focus: "focus", blur: "blur", change: "change", created: "created", checkedChange: "checkedChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return SwitchComponent_1; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function SwitchComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwitchComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-switch',
                inputs: inputs$3,
                outputs: outputs$3,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return SwitchComponent_1; }),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return SwitchComponent;
}(ej2Buttons.Switch));
/**
 * @nocollapse
 */
exports.SwitchComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.SwitchComponent = SwitchComponent_1 = __decorate$3([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase, ej2AngularBase.FormBase]),
    __metadata$3("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.SwitchComponent);
var SwitchComponent_1;
/**
 * NgModule definition for the Switch component.
 */
var SwitchModule = /** @class */ (function () {
    function SwitchModule() {
    }
SwitchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SwitchModule });
SwitchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SwitchModule_Factory(t) { return new (t || SwitchModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SwitchModule, { declarations: [
        /**
         * Represents the Angular Switch Component.
         * ```html
         * <ejs-switch></ejs-switch>
         * ```
         */
        exports.SwitchComponent], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * Represents the Angular Switch Component.
         * ```html
         * <ejs-switch></ejs-switch>
         * ```
         */
        exports.SwitchComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwitchModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.SwitchComponent
                ],
                exports: [
                    exports.SwitchComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return SwitchModule;
}());
/**
 * @nocollapse
 */
SwitchModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the Switch component with providers.
 */
var SwitchAllModule = /** @class */ (function () {
    function SwitchAllModule() {
    }
SwitchAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SwitchAllModule });
SwitchAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SwitchAllModule_Factory(t) { return new (t || SwitchAllModule)(); }, providers: [], imports: [[common.CommonModule, SwitchModule], SwitchModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SwitchAllModule, { imports: [ɵngcc1.CommonModule, SwitchModule], exports: [SwitchModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwitchAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, SwitchModule],
                exports: [
                    SwitchModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return SwitchAllModule;
}());
/**
 * @nocollapse
 */
SwitchAllModule.ctorParameters = function () { return []; };
var input = ['avatarIconCss', 'avatarText', 'cssClass', 'enabled', 'leadingIconCss', 'leadingIconUrl', 'text', 'trailingIconCss', 'trailingIconUrl', 'value'];
var outputs$4 = [];
/**
 * `e-chip` directive represent a chip of the Angular ChipList.
 * ```html
 * <ejs-chiplist >
 *   <e-chips>
 *    <e-chip text='chip1'></e-chip>
 *    <e-chip text='chip2'></e-chip>
 *   </e-chips>
 * </ejs-chiplist>
 * ```
 */
var ChipDirective = /** @class */ (function (_super) {
    __extends(ChipDirective, _super);
    /**
     * @param {?} viewContainerRef
     */
    function ChipDirective(viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.registerEvents(outputs$4);
        _this.directivePropList = input;
        return _this;
    }
ChipDirective.ɵfac = function ChipDirective_Factory(t) { return new (t || ChipDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ChipDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ChipDirective, selectors: [["e-chip"]], inputs: { avatarIconCss: "avatarIconCss", avatarText: "avatarText", cssClass: "cssClass", enabled: "enabled", leadingIconCss: "leadingIconCss", leadingIconUrl: "leadingIconUrl", text: "text", trailingIconCss: "trailingIconCss", trailingIconUrl: "trailingIconUrl", value: "value" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChipDirective, [{
        type: core.Directive,
        args: [{
                selector: 'e-chips>e-chip',
                inputs: input,
                outputs: outputs$4,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ChipDirective;
}(ej2AngularBase.ComplexBase));
/**
 * @nocollapse
 */
ChipDirective.ctorParameters = function () { return [
    { type: core.ViewContainerRef, },
]; };
/**
 * Chip Array Directive
 */
var ChipsDirective = /** @class */ (function (_super) {
    __extends(ChipsDirective, _super);
    function ChipsDirective() {
        return _super.call(this, 'chips') || this;
    }
ChipsDirective.ɵfac = function ChipsDirective_Factory(t) { return new (t || ChipsDirective)(); };
ChipsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ChipsDirective, selectors: [["e-chips"]], contentQueries: function ChipsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ChipDirective, 0);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChipsDirective, [{
        type: core.Directive,
        args: [{
                selector: 'ejs-chiplist>e-chips',
                queries: {
                    children: new core.ContentChildren(ChipDirective)
                }
            }]
    }], function () { return []; }, null); })();
    return ChipsDirective;
}(ej2AngularBase.ArrayBase));
/**
 * @nocollapse
 */
ChipsDirective.ctorParameters = function () { return []; };
var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$4 = ['avatarIconCss', 'avatarText', 'chips', 'cssClass', 'enableDelete', 'enablePersistence', 'enableRtl', 'enabled', 'leadingIconCss', 'leadingIconUrl', 'locale', 'selectedChips', 'selection', 'text', 'trailingIconCss', 'trailingIconUrl'];
var outputs$5 = ['beforeClick', 'click', 'created', 'delete'];
var twoWays$4 = [''];
/**
 * Represents the Essential JS 2 Angular ChipList Component.
 * ```html
 * <ejs-chiplist></ejs-chiplist>
 * ```
 */
exports.ChipListComponent = /** @class */ (function (_super) {
    __extends(ChipListComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function ChipListComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.tags = ['chips'];
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$5);
        _this.addTwoWay.call(_this, twoWays$4);
        ej2AngularBase.setValue('currentInstance', _this, _this.viewContainerRef);
        _this.context = new ej2AngularBase.ComponentBase();
        return _this;
    }
    /**
     * @return {?}
     */
    ChipListComponent.prototype.ngOnInit = function () {
        this.context.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    ChipListComponent.prototype.ngAfterViewInit = function () {
        this.context.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    ChipListComponent.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    ChipListComponent.prototype.ngAfterContentChecked = function () {
        this.tagObjects[0].instance = this.childChips;
        this.context.ngAfterContentChecked(this);
    };
ChipListComponent.ɵfac = function ChipListComponent_Factory(t) { return new (t || ChipListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
ChipListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChipListComponent, selectors: [["ejs-chiplist"]], contentQueries: function ChipListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ChipsDirective, 1);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childChips = _t.first);
    } }, inputs: { avatarIconCss: "avatarIconCss", avatarText: "avatarText", chips: "chips", cssClass: "cssClass", enableDelete: "enableDelete", enablePersistence: "enablePersistence", enableRtl: "enableRtl", enabled: "enabled", leadingIconCss: "leadingIconCss", leadingIconUrl: "leadingIconUrl", locale: "locale", selectedChips: "selectedChips", selection: "selection", text: "text", trailingIconCss: "trailingIconCss", trailingIconUrl: "trailingIconUrl" }, outputs: { beforeClick: "beforeClick", click: "click", created: "created", delete: "delete" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function ChipListComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChipListComponent, [{
        type: core.Component,
        args: [{
                selector: 'ejs-chiplist',
                inputs: inputs$4,
                outputs: outputs$5,
                template: '',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                queries: {
                    childChips: new core.ContentChild(ChipsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return ChipListComponent;
}(ej2Buttons.ChipList));
/**
 * @nocollapse
 */
exports.ChipListComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ViewContainerRef, },
    { type: core.Injector, },
]; };
exports.ChipListComponent = __decorate$4([
    ej2AngularBase.ComponentMixins([ej2AngularBase.ComponentBase]),
    __metadata$4("design:paramtypes", [core.ElementRef,
        core.Renderer2,
        core.ViewContainerRef,
        core.Injector])
], exports.ChipListComponent);
/**
 * NgModule definition for the ChipList component.
 */
var ChipListModule = /** @class */ (function () {
    function ChipListModule() {
    }
ChipListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ChipListModule });
ChipListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ChipListModule_Factory(t) { return new (t || ChipListModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChipListModule, { declarations: [
        /**
         * Represents the Essential JS 2 Angular ChipList Component.
         * ```html
         * <ejs-chiplist></ejs-chiplist>
         * ```
         */
        exports.ChipListComponent, ChipDirective, ChipsDirective], imports: [ɵngcc1.CommonModule], exports: [
        /**
         * Represents the Essential JS 2 Angular ChipList Component.
         * ```html
         * <ejs-chiplist></ejs-chiplist>
         * ```
         */
        exports.ChipListComponent, ChipDirective, ChipsDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChipListModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    exports.ChipListComponent,
                    ChipDirective,
                    ChipsDirective
                ],
                exports: [
                    exports.ChipListComponent,
                    ChipDirective,
                    ChipsDirective
                ]
            }]
    }], function () { return []; }, null); })();
    return ChipListModule;
}());
/**
 * @nocollapse
 */
ChipListModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the ChipList component with providers.
 */
var ChipListAllModule = /** @class */ (function () {
    function ChipListAllModule() {
    }
ChipListAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ChipListAllModule });
ChipListAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ChipListAllModule_Factory(t) { return new (t || ChipListAllModule)(); }, providers: [], imports: [[common.CommonModule, ChipListModule], ChipListModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChipListAllModule, { imports: [ɵngcc1.CommonModule, ChipListModule], exports: [ChipListModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChipListAllModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, ChipListModule],
                exports: [
                    ChipListModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return ChipListAllModule;
}());
/**
 * @nocollapse
 */
ChipListAllModule.ctorParameters = function () { return []; };

exports.ButtonModule = ButtonModule;
exports.ButtonAllModule = ButtonAllModule;
exports.CheckBoxModule = CheckBoxModule;
exports.CheckBoxAllModule = CheckBoxAllModule;
exports.RadioButtonModule = RadioButtonModule;
exports.RadioButtonAllModule = RadioButtonAllModule;
exports.SwitchModule = SwitchModule;
exports.SwitchAllModule = SwitchAllModule;
exports.ChipDirective = ChipDirective;
exports.ChipsDirective = ChipsDirective;
exports.ChipListModule = ChipListModule;
exports.ChipListAllModule = ChipListAllModule;
exports.ɵa = inputs;
exports.ɵb = outputs;
exports.ɵc = inputs$1;
exports.ɵd = outputs$1;
exports.ɵi = inputs$4;
exports.ɵj = outputs$5;
exports.ɵe = inputs$2;
exports.ɵf = outputs$2;
exports.ɵg = inputs$3;
exports.ɵh = outputs$3;
exports.wrapperInitialize = ej2Buttons.wrapperInitialize;
exports.getTextNode = ej2Buttons.getTextNode;
exports.destroy = ej2Buttons.destroy;
exports.preRender = ej2Buttons.preRender;
exports.createCheckBox = ej2Buttons.createCheckBox;
exports.rippleMouseHandler = ej2Buttons.rippleMouseHandler;
exports.setHiddenInput = ej2Buttons.setHiddenInput;
exports.buttonObserver = ej2Buttons.buttonObserver;
exports.Button = ej2Buttons.Button;
exports.CheckBox = ej2Buttons.CheckBox;
exports.RadioButton = ej2Buttons.RadioButton;
exports.Switch = ej2Buttons.Switch;
exports.classNames = ej2Buttons.classNames;
exports.ChipList = ej2Buttons.ChipList;
exports.Chip = ej2Buttons.Chip;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ej2-angular-buttons.umd.js.map